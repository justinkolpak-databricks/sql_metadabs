from databricks.bundles.jobs import Job, notebook_task, sql_notebook_task, task

@sql_notebook_task(notebook_path="/src/sql_metadabs/sql_notebook.sql" , warehouse_id='475b94ddc7cd5211')
def ingestion_task(catalog_name: str, 
                schema_name: str,
                table_name:str,
                file_path: str,
                file_format: str,
                infer_schema: bool,
                headers_included: bool,
                line_sep: str,
                file_name_pattern: str,
                schema: str,                  
                ):
  pass

# Dependencies need to be referenced using the Task object, and representing this as a dictionary makes it easy to retrieve Tasks by name
def create_task_dict(table_names):
  task_dict = {}
  for table_name in table_names:
    task = ingestion_task(catalog_name = 'justin_kolpak',
                    schema_name = 'tpch',
                    table_name = table_name,
                    file_path='/Volumes/tpcdi/tpcdi_raw_data/tpcdi_volume/sf=10/Batch1/',
                    file_format='csv',
                    infer_schema=False,
                    headers_included=False,
                    line_sep=",",
                    file_name_pattern="HR.csv",
                    schema="employeeid BIGINT COMMENT 'ID of employee', managerid BIGINT COMMENT 'ID of employeeâ€™s manager', employeefirstname STRING COMMENT 'First name', employeelastname STRING COMMENT 'Last name', employeemi STRING COMMENT 'Middle initial', employeejobcode STRING COMMENT 'Numeric job code', employeebranch STRING COMMENT 'Facility in which employee has office', employeeoffice STRING COMMENT 'Office number or description', employeephone STRING COMMENT 'Employee phone number'"
                  ).with_task_key(table_name)
    
    task_dict[table_name] = task

  return task_dict


table_names = ['hr', 'hr2', 'hr3']
task_dict = create_task_dict(table_names) 

for table_name in task_dict:
  if table_name == 'hr': # to be automated, just for testing purposes
    depends_on_task_names = ['hr2','hr3']
  else:
    depends_on_task_names = []

  depends_on_tasks = [v for k, v in task_dict.items() if k in depends_on_task_names]
    
  for task in depends_on_tasks:
    task_dict[table_name] = task_dict[table_name].add_depends_on(task)

task_list = list(task_dict.values())

my_job_with_autogenerated_tasks = Job.create(
  resource_name = "ingestion_job",
  name = "Ingestion Job",
  tasks = task_list 
)