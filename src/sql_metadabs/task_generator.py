from databricks.bundles.jobs import Job, notebook_task, sql_notebook_task, task
import json

# Open json metadata and deserialize to dict
with open("task_metadata.json") as f:
    task_list = json.load(f)


@sql_notebook_task(notebook_path="notebooks/st_json.sql", warehouse_id="475b94ddc7cd5211")
def st_json(
    tgt_catalog: str,
    tgt_schema: str,
    tgt_table: str,
    table_comment: str,
    table_properties: str,
    select_list: str,
    src_path: str
):
    pass

@sql_notebook_task(notebook_path="notebooks/st_parquet.sql", warehouse_id="475b94ddc7cd5211")
def st_parquet(
    tgt_catalog: str,
    tgt_schema: str,
    tgt_table: str,
    table_comment: str,
    table_properties: str,
    select_list: str,
    src_path: str
):
    pass


def create_tasks(task_list):
    """Add task objects to task metadata list

    Args:
        task_list (list): List of task metadata

    Returns:
        list: List of task metadata and objects
    """
    for t in task_list:
        if t["task_type"] == "st_parquet":
            t["task"] = st_parquet(**t["task_params"]).with_task_key(t["task_key"])
        elif t["task_type"] == "st_json":
            t["task"] = st_json(**t["task_params"]).with_task_key(t["task_key"])

    return task_list


def add_deps(task_list):
    """Add dependencies to task objects

    Args:
        task_list (list): List of task metadata and objects

    Returns:
        list: List of task metadata and objects with dependencies added
    """
    for t in task_list:
        if t["depends_on"]:
            depends_on_task_names = t["depends_on"]
            depends_on_tasks = [
                t["task"] for t in task_list if t["task_key"] in depends_on_task_names
            ]
            for d in depends_on_tasks:
                t["task"] = t["task"].add_depends_on(d)

    return task_list


task_list_filtered = [t for t in task_list if t["batch"] in ('st_parquet', 'st_json')]
task_list_w_obj = create_tasks(task_list_filtered)
task_list_w_deps = add_deps(task_list_w_obj)
task_obj_list = [t["task"] for t in task_list_w_deps]

job_with_autogenerated_tasks = Job.create(
    resource_name="sql_metadabs_ingest",
    name="sql_metadabs_ingest",
    tasks=task_obj_list,  # type: ignore
)
